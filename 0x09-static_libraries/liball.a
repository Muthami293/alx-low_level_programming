!<arch>
abs.c/          0           0     0     644     247       `
#include "main.h"
/**
 * _abs - prints the absolute value of an integer
 * @n: the integer to get absolute value
 * Return: 0 for success
 */

int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	else if (n < 0)
	{
		return (-n);
	}

	return (0);
}

atoi.c/         0           0     0     644     369       `
#include "main.h"

/**
  * _atoi - convert a string to integer
  * @s: the string to be converted
  * Return: integer value
  */

int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}

isalpha.c/      0           0     0     644     262       `
#include "main.h"

/**
 * _isalpha - check if alphabet
 * @c: character to check
 * Return: 1 if true and 0 if false
 */

int _isalpha(int c)
{

	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}
isdigit.c/      0           0     0     644     209       `
#include "main.h"

/**
  * _isdigit - Check if integer is digit
  * @c: integer type to check
  * Return: 1 if true, 0 if not
  */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);

	return (0);
}

islower.c/      0           0     0     644     227       `
#include "main.h"

/**
 * _islower - check if letter is in lowercase
 * @c: integer as parameter
 * Return: 1 for success
 * 0 if not lowercase
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);

	return (0);
}

isupper.c/      0           0     0     644     216       `
#include "main.h"

/**
  * _isupper - Check if int is uppercase
  * @c: the integer to check
  * Return: 1 if true, 0 if lowercase
  */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);

	return (0);
}
memcpy.c/       0           0     0     644     314       `
#include "main.h"

/**
  * _memcpy - copies n bytes from memory
  * @dest: destination
  * @src: source
  * @n: the number of bytes
  * Return: dest pointer
  */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);

}
memset.c/       0           0     0     644     314       `
#include "main.h"

/**
  * _memset - fill the first n bytes with b
  * @b: the char to fill with
  * @s: the memory area
  * @n: number of bytes to be filled
  * Return: pointer in s
  */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(s + i) = b;

	return (s);

}
putchar.c/      0           0     0     644     263       `
#include "main.h"
#include <unistd.h>

/**
 * _putchar - writes the charcter c to stdout
 * @c: the character to print
 *
 * Return: on success 1
 * on error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

puts.c/         0           0     0     644     169       `
#include "main.h"

/**
 * _puts - prints the string to stdout
 * @str: string to be printed
 */

void _puts(char *s)
{
	while (*s)
		_putchar(*s++);

	_putchar('\n');
}

strcat.c/       0           0     0     644     357       `
#include "main.h"

/**
  * _strcat - Concatenate two strings
  * @dest: destination pointer
  * @src: source pointer
  * Return: concatenated string
  */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j = 0;

	while (*(dest + i))
		i++;

	while (*(src + j))
	{
		*(dest + i) = *(src + j);
		i++;
		j++;
	}

	*(dest + i) = '\0';

	return (dest);
}

strchr.c/       0           0     0     644     335       `
#include "main.h"

/**
  * _strchr - locate character in string
  * @s: string to check
  * @c: character to find
  * Return: NULL or pointer if found
  */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		if (*(s + i) == c)
			break;
	}

	if (*(s + i) == c)
		return (s + i);
	else
		return ('\0');
}

strcmp.c/       0           0     0     644     260       `
#include "main.h"

/**
  * _strcmp - function that compares two strings
  * @s1: string one
  * @s2: string 2
  * Return: Integer
  */

int _strcmp(char *s1, char *s2)
{
	for (; *s1 == *s2; s1++, s2++)
		if (*s1 == '\0')
			return (0);

	return (*s1 - *s2);
}
strcpy.c/       0           0     0     644     292       `
#include "main.h"

/**
  * _strcpy - prints a copy
  * @dest: destination of the copy
  * @src: source of the copy
  * Return: return char
  */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	dest[i++] = '\0';

	return (dest);
}
strlen.c/       0           0     0     644     215       `
#include "main.h"

/**
 * _strlen - prints length of a string
 * @s: the string parameter
 *
 * Return: integer
 */

int _strlen(char *s)
{
	int len;

	for (len = 0; *s != '\0'; len++)
	{
		s++;
	}
	return (len);
}

strncat.c/      0           0     0     644     446       `
#include "main.h"

/**
  * _strncat - concatenate two strings limited by n bytes
  * @dest: pointer to destination
  * @src: pointer to source
  * @n: size of the concatenated string
  * Return: concatenated string
  */

char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int j = 0;

	while (*(dest + i))
		i++;

	while (*(src + j) != *(src + n))
	{
		*(dest + i) = *(src + j);
		i++;
		j++;
	}

	*(dest + i) = '\0';


	return (dest);
}
strncpy.c/      0           0     0     644     380       `
#include "main.h"

/**
  * _strncpy - copy string with n bytes
  * @dest: destination of the string
  * @src: source of the string
  * @n : n bytes
  * Return: string
  */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; *(src + i) != '\0' && i < n; i++)
	{
		*(dest + i) = *(src + i);
	}

	while (i < n)
	{
		*(dest + i) = '\0';
		i++;
	}

	return (dest);
}
strpbrk.c/      0           0     0     644     392       `
#include "main.h"

/**
  * _strpbrk - search a string of any set of bytes
  * @s: string to search in
  * @accept: string to search
  * Return: pointer or null
  */

char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
				return (s + i);
		}
	}

	return ('\0');
}
strspn.c/       0           0     0     644     492       `
#include "main.h"

/**
  * _strspn - get length of substring
  * @s: string to check
  * @accept: substring
  * Return: length of substring
  */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;
	unsigned int len;

	len = 0;
	i = 0;

	while (*(s + i))
	{
		for (j = 0; *(accept + j); j++)
		{
			if (*(s + i) == *(accept + j))
			{
				len++;
				break;
			}

			if (*(accept + j + 1) == '\0' && *(s + i) != *(accept + j))
				return (len);

		}

		i++;
	}

	return (len);
}
strstr.c/       0           0     0     644     561       `
#include "main.h"

/**
 * _strstr - locate and return pointer to first occurence of substring
 * @haystack: string to search
 * @needle: target substring to search for
 * Return: pointer to index of string at first occurence of whole substring
 */

char *_strstr(char *haystack, char *needle)
{
	char *hay;
	char *need;

	while (*haystack != '\0')
	{
		hay = haystack;
		need = needle;

		while (*haystack != '\0' && *need != '\0' && *haystack == *need)
		{
			haystack++;
			need++;
		}
		if (!*need)
			return (hay);
		haystack = hay + 1;
	}

	return (0);

}

